#%RAML 0.8
title: Nitrokey NetHSM
version: 0.1
#baseUri: https://local/{version}
baseUri: http://mocksvc.mulesoft.com/mocks/bc9055f5-5fb7-4311-98c0-9f4858c5773d/{version}
/keys:
  description: The keys being stored in the NetHSM. All <a href="https://tools.ietf.org/html/rfc4648#section-4">base64url</a> encoded values are Big Endian.
  get:
    description: Retrieve all public keys
    responses:
      200:
        body:
          application/json:
            schema: collectionPublicKey
            example: |
              [
                {
                  "location": "/api/v1/MGQ1NVbxki8iYPxmYV1r",
                  "key": {
                    "purpose": "signing",
                    "algorithm": "RSA",
                    "publicKey": {
                      "modulus": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                      "publicExponent": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
                    }
                  }
                },
                {
                  "location": "/api/v1/j843ig9045rji9g90",
                  "key": {
                    "purpose": "signing",
                    "algorithm": "RSA",
                    "publicKey": {
                      "modulus": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                      "publicExponent": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
                    }
                  }
                }
              ]
  /{keyId}:
    delete:
      description: Deletes key pair
      queryParameters:
        adminPassword:
          displayName: Admin Password
          type: string
          description: The defined Admin Password is required for authentication. Minimum Length x, combination of TBD.
          example: TODO
          required: true
      responses:
        200:
        404:
        500:
    put:
      description: Generates key pair
      queryParameters:
        adminPassword:
      body:
        application/json:
          schema: keyParameter
          example: |
            {
              "purpose": "signing",
              "algorithm": "RSA",
              "length": 2048
            }
      responses:
        200:
        404:
        500:
    post:
      description: Imports key pair into NetHSM
      queryParameters:
        adminPassword:
      body:
        application/json:
          schema: keyPair
          example: |
            {
              "purpose": "signing",
              "algorithm": "RSA",
              "privateKey": {
                "primeP": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                "primeQ": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                "publicExponent": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
              },
            }
      responses:
        303:
        404:
        500:
    /public:
      description: The public key
      get:
        description: Retrieve Public Key
        responses:
          200:
            body:
              application/json:
                schema: publicKey
                example: |
                  {
                    "purpose": "signing",
                    "algorithm": "RSA",
                    "publicKey": {
                      "modulus": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                      "publicExponent": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
                    }
                  }
    /secret:
      description: The secret key
      post:
        queryParameters:
          userPassword:
            displayName: User Password
            type: string
            description: User Password to authenticate the operation
            example: fr5678iujhz789
            required: true
        description: Perform a signature or decryption operation on the secret key.
        body:
          application/json:
            schema: keyOperation
            example: |
              {
                "operation": "decrypting",
                "blob": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                "padding": "pkcs#1",
                "hashAlgorithm": "SHA256"
              }
        responses:
          200:
            body:
              application/json:
                schema: operationResult
                example: |
                  {
                    "result": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
                  }
          404:
          500:
/passwords:
    /admin:
      description: Admin Password is required to authenticate system modifications.
      post:
        queryParameters:
          adminPassword:
          newAdminPassword:
        description: Change the password
        responses:
          200:
          404:
          500:
    /boot:
      description: The Boot Password is required to unlock a freshly booted system. It's optional. Alternatively the User Password is used.
      post:
        queryParameters:
          adminPassword or bootPassword:
          newBootPassword:
        description: Activate or change the password
        responses:
          200:
          404:
          500:
      delete:
        queryParameters:
          adminPassword or bootPassword:
        description: Deactivate the password
        responses:
          200:
          404:
          500:
    /user:
      description: User Password is required to execute operations.
      post:
        queryParameters:
          userPassword or adminPassword:
          newUserPassword:
        description: Change the password
        responses:
          200:
          404:
          500:
/system:
  /firmware:
    post:
      queryParameters:
        adminPassword:
      body:
        application/json:
          schema: firmware
          example: |
            {
              "firmware": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
            }
      description: Update the firmware
      responses:
        200:
        500:
    /version:
      description: The version of the installed firmware.
      get:
        description: Retrieve the current firmware version
        responses:
          200:
          500:
  /keys:
    description: Keys for the system.
    /firmware/public:
      description: The public key is used to verify signed firmware updates.
      get:
        queryParameters:
          adminPassword:
        description: Retrieve public key
        responses:
          200:
            body:
              application/json:
                schema: publicKey
                example: |
                  {
                    "purpose": "signing",
                    "algorithm": "RSA",
                    "publicKey": {
                      "modulus": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                      "publicExponent": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
                    }
                  }
          404:
          500:
      post:
        description: Import the public key to the NetHSM
        queryParameters:
          adminPassword:
        body:
          application/json:
            schema: publicKey
            example: |
              {
                "purpose": "signing",
                "algorithm": "RSA",
                "publicKey": {
                  "modulus": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                  "publicExponent": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
                }
              }
        responses:
          200:
          404:
          500:
      delete:
        queryParameters:
          adminPassword:
        description: Delete the public key. No firmware updates will be possible without a public key.
        responses:
          200:
          404:
          500:
    /tls:
      description: This key pair and certificate are used for HTTPS/TLS.
      post:
        queryParameters:
          adminPassword:
        body:
          application/json:
            schema: keyPair
        description: Import a key pair into the NetHSM.
        responses:
          200:
          500:
      put:
        queryParameters:
          adminPassword:
        description: Generate a key pair in the NetHSM.
        responses:
          200:
          500:
      /public:
        description: The public key
        get:
          description: Retrieve Public Key
          responses:
            200:
              body:
                application/json:
                  schema: publicKey
                  example: |
                    {
                      "alg": "RSA",
                      "publicKey": {
                        "modulus": "FhJQl11CiY0ifRHXeAqFh4rdSl6",
                        "publicExponent": "FhJQl11CiY0ifRHXeAqFh4rdSl6"
                      }
                    }
            404:
      /certificate:
        description: The X.509 certificate
        get:
        post:
          queryParameters:
            adminPassword:
          body:
            application/json:
              schema: certificate
  /lock:
    description: Lock an unlocked system so that no operations are possible anymore until it is unlocked again.
    post:
      queryParameters:
        adminPassword or bootPassword or userPassword:
  /name:
    description: The name of the system (e.g. NetHSM)
    get:
  /network:
    /ipv4:
      get:
      post:
        queryParameters:
          adminPassword:
        body:
            application/json:
              schema: ifConfig
              example: |
                {
                  "ipaddress": "123.456.789.123",
                  "subnetmask": "255.255.255.255",
                  "broadcast": "1.1.1.1"
                }
    /ipv6:
      get:
      post:
        queryParameters:
          adminPassword:
        body:
            application/json:
              schema: ifConfig
  /reboot:
    description: Reboot the system
    post:
        queryParameters:
          adminPassword:
  /serial:
    description: The system's serial number should be derived from some hardware serials (e.g. CPU ID).
    get:
  /status:
    description: The system status.
    get:
      responses:
        200:
          body:
            application/json:
              schema: SimpleResponse
              example: |
                {
                  "status": "OK"
                }

  /shutdown:
    description: Shutdown and poweroff the system.
    post:
      queryParameters:
        adminPassword:
  /unlock:
    description: Unlock and decrypt all critical data (e.g. keys) after a fresh boot or locking.
    post:
      queryParameters:
        bootPassword:
  /vendor:
    description: The vendor of the system (e.g. Nitrokey)
    get:

schemas:
  - firmware: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "object",
        "properties": {
          "firmware": {
            "id": "http://jsonschema.net/firmware",
            "type": "string"
          }
        },
        "required": [
          "firmware"
        ]
      }
  - ifConfig: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "object",
        "properties": {
          "ipaddress": {
            "id": "http://jsonschema.net/ipaddress",
            "type": "string"
          },
          "subnetmask": {
            "id": "http://jsonschema.net/subnetmask",
            "type": "string"
          },
          "broadcast": {
            "id": "http://jsonschema.net/broadcast",
            "type": "string"
          }
        },
        "required": [
          "ipaddress",
          "subnetmask",
          "broadcast"
        ]
      }
  - keyOperation: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "object",
        "properties": {
          "operation": {
            "id": "http://jsonschema.net/operation",
            "type": "string"
          },
          "blob": {
            "id": "http://jsonschema.net/blob",
            "type": "string"
          },
          "padding": {
            "id": "http://jsonschema.net/padding",
            "type": "string"
          },
          "hashAlgorithm": {
            "id": "http://jsonschema.net/hashAlgorithm",
            "type": "string"
          }
        },
        "required": [
          "operation",
          "blob"
        ]
      }
  - operationResult: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "object",
        "properties": {
          "result": {
            "id": "http://jsonschema.net/result",
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      }
  - publicKey: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "object",
        "properties": {
          "purpose": {
            "id": "http://jsonschema.net/purpose",
            "type": "string"
          },
          "algorithm": {
            "id": "http://jsonschema.net/algorithm",
            "type": "string"
          },
          "publicKey": {
            "id": "http://jsonschema.net/publicKey",
            "type": "object",
            "properties": {
              "modulus": {
                "id": "http://jsonschema.net/publicKey/modulus",
                "type": "string"
              },
              "publicExponent": {
                "id": "http://jsonschema.net/publicKey/publicExponent",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "purpose",
          "algorithm",
          "publicKey"
        ]
      }
  - collectionPublicKey: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "array",
        "items": [
          {
            "id": "http://jsonschema.net/0",
            "type": "object",
            "properties": {
              "purpose": {
                "id": "http://jsonschema.net/0/purpose",
                "type": "string"
              },
              "algorithm": {
                "id": "http://jsonschema.net/0/algorithm",
                "type": "string"
              },
              "publicKey": {
                "id": "http://jsonschema.net/0/publicKey",
                "type": "object",
                "properties": {
                  "modulus": {
                    "id": "http://jsonschema.net/0/publicKey/modulus",
                    "type": "string"
                  },
                  "publicExponent": {
                    "id": "http://jsonschema.net/0/publicKey/publicExponent",
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "purpose",
              "algorithm",
              "publicKey"
            ]
          },
          {
            "id": "http://jsonschema.net/1",
            "type": "object",
            "properties": {
              "purpose": {
                "id": "http://jsonschema.net/1/purpose",
                "type": "string"
              },
              "algorithm": {
                "id": "http://jsonschema.net/1/algorithm",
                "type": "string"
              },
              "publicKey": {
                "id": "http://jsonschema.net/1/publicKey",
                "type": "object",
                "properties": {
                  "modulus": {
                    "id": "http://jsonschema.net/1/publicKey/modulus",
                    "type": "string"
                  },
                  "publicExponent": {
                    "id": "http://jsonschema.net/1/publicKey/publicExponent",
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
  - keyPair: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "object",
        "properties": {
          "purpose": {
            "id": "http://jsonschema.net/purpose",
            "type": "string"
          },
          "algorithm": {
            "id": "http://jsonschema.net/algorithm",
            "type": "string"
          },
          "publicKey": {
            "id": "http://jsonschema.net/publicKey",
            "type": "object",
            "properties": {
              "modulus": {
                "id": "http://jsonschema.net/publicKey/modulus",
                "type": "string"
              },
              "publicExponent": {
                "id": "http://jsonschema.net/publicKey/publicExponent",
                "type": "string"
              }
            }
          },
          "privateExponent": {
            "id": "http://jsonschema.net/privateExponent",
            "type": "string"
          }
        },
        "required": [
          "purpose",
          "algorithm",
          "publicKey",
          "privateExponent"
        ]
      }
  - keyParameter: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "id": "http://jsonschema.net",
        "type": "object",
        "properties": {
          "purpose": {
            "id": "http://jsonschema.net/purpose",
            "type": "string"
          },
          "algorithm": {
            "id": "http://jsonschema.net/algorithm",
            "type": "string"
          },
          "length": {
            "id": "http://jsonschema.net/length",
            "type": "integer"
          }
        },
        "required": [
          "purpose",
          "algorithm",
          "length"
        ]
      }
